// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?  // URL to profile image
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Review Review[]

  Watchlist Watchlist[]

  Favorite Favorite[]
}

enum Role {
  USER
  ADMIN
}

model Movie {
  id          String     @id @default(uuid())
  title       String
  language    String
  description String
  genre       String
  releaseYear Int
  posterURL   String
  createdAt   DateTime @default(now())

  Review Review[]

  Watchlist Watchlist[]

  Favorite Favorite[]
}



model Review {
  id        String   @id @default(uuid())
  userId    String
  movieId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  // Optional: Relations (assuming User and Movie tables exist)
  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
}



model Watchlist {
  id      String @id @default(uuid())
  userId  String
  movieId String

  user    User   @relation(fields: [userId], references: [id])
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Optional: A user can add a movie only once to watchlist
}

model Favorite {
  id      String @id @default(uuid())
  userId  String
  movieId String

  user    User   @relation(fields: [userId], references: [id])
  movie   Movie  @relation(fields: [movieId], references: [id])

  @@unique([userId, movieId]) // Optional: A user can add a movie only once to favorites
}
